%config IPCompleter.greedy=True #to enable suggest syntax
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#Importing the dataset
dataset = pd.read_csv("xxx.csv") #read any particular file
x = pd.DataFrame(dataset.iloc[:,0]) #x is the independent variable matrix
y = pd.DataFrame(dataset.iloc[:,1])#dependent variable column

#Preprocessing
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 1/3, random_state = 0)

#simple linear Regression
from sklearn.linear_model import LinearRegression
regressor = LinearRegression() 
regressor.fit(x_train, y_train) #here regressor is the machine that we created that is learning using OLS regression

#Predicting to test the results
y_pred = pd.DataFrame(regressor.predict(x_test))

#Visualization
#Plotting the training set against the prediction
plt.scatter(x_train, y_train, color = 'red')
plt.plot(x_train, regressor.predict(x_train))
plt.title ('X vs Y (train set)')
plt.xlabel ('X UNITS')
plt.ylabel ('Y UNITS')
plt.show()

#Plotting the test set against the prediction
plt.scatter(x_test, y_test, color = 'red')
plt.plot(x_train, regressor.predict(x_train), color = 'blue')
plt.title ('X vs Y (test)')
plt.xlabel ('X UNITS')
plt.ylabel ('Y UNITS')
plt.show()

#Plotting the residulas against the predicted variable
visualizer = ResidualsPlot(regressor, hist=False)
visualizer.fit(x_train, y_train)
visualizer.score(x_test, y_test)
visualizer.poof()
